name: Master CI/CD Pipeline 

on:
  push:
    branches: [ master-ci ]
  pull_request:
    branches: [ master-ci ]

jobs:
  build-and-test:
    runs-on: self-hosted
    
    environment:
      name: master

    env:
      BACKEND_PORT: ${{ vars.BACKEND_PORT || '8080' }}
      BACKEND_UPLOAD_PATH: ${{ vars.BACKEND_UPLOAD_PATH || './app/uploads' }}
      BACKEND_MAX_FILE_SIZE: ${{ vars.BACKEND_MAX_FILE_SIZE || '52428800' }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      BACKEND_MAX_ATTEMPTS_HANDLED: ${{ vars.BACKEND_MAX_ATTEMPTS_HANDLED || '3' }}
      BACKEND_HANDLER_TIMEOUT: ${{ vars.BACKEND_HANDLER_TIMEOUT || '24' }}
      DB_HOST: ${{ vars.DB_HOST || 'db' }}
      DB_PORT: ${{ vars.DB_PORT || '5432' }}
      DB_USER: ${{ vars.DB_USER || 'postgres' }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ vars.DB_NAME || 'obscura' }}
      ML_SERVICE_URL: ${{ vars.ML_SERVICE_URL || 'http://ml-service:8000' }}
      ML_SERVICE_ENABLED: ${{ vars.ML_SERVICE_ENABLED || 'true' }}
      ML_WORKERS: ${{ vars.ML_WORKERS || '3' }}
      NEXT_PUBLIC_API_LINK: ${{ vars.NEXT_PUBLIC_API_LINK || 'http://localhost:8080' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate .env files from GitHub Secrets and Variables
      run: |
        chmod +x scripts/generate-env.sh
        ./scripts/generate-env.sh

    - name: Display generated .env files (for debugging)
      run: |
        echo "=== backend/backend-app/.env ==="
        cat backend/backend-app/.env
        echo ""
        echo "=== backend/ml/.env ==="
        cat backend/ml/.env
        echo ""
        echo "=== frontend/.env ==="
        cat frontend/.env

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Check Docker is working
      run: docker --version

    - name: Check Docker Compose is working
      run: docker compose --version

    - name: Build and start services with Docker Compose
      run: |
        docker compose up -d --build
        sleep 30  # Wait for services to start

    - name: Health check backend
      run: |
        # Wait for backend to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done' || echo "Backend health check failed or timed out"

    - name: Health check frontend
      run: |
        # Wait for frontend to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done' || echo "Frontend not responding or timed out"

    - name: Run integration tests
      run: |
        docker-compose exec backend-app go test ./... -v || echo "Integration tests skipped or failed"