services:
  backend-app:
    build: 
      context: ./backend/backend-app
      dockerfile: Dockerfile
    env_file:
      - ./backend/backend-app/.env
    environment:
      # Docker-specific overrides (only what differs from .env)
      - DB_HOST=db              # Docker service name instead of localhost
      - DB_NAME=appdb           # Docker database name instead of obscura
      - UPLOAD_PATH=/app/uploads # Docker container path instead of ./uploads
      - ML_SERVICE_URL=http://ml:8000  # Docker service URL instead of localhost:8000
    volumes:
      - uploads:/app/uploads
    ports:
      - "8080:8080"
    depends_on:
      - db
      - ml
    networks:
      - app-network
    restart: unless-stopped

  ml:
    build: 
      context: ./backend/ml
      dockerfile: Dockerfile
    container_name: ml-fastapi-app
    ports:
      - "8000:8000"
    volumes:
      - ./backend/ml/app:/app/app
      - ./backend/ml/.env:/app/.env:ro
      - models:/app/models
      - uploads:/app/uploads
    networks:
      - app-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  frontend:
    build: 
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    networks:
      - app-network

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /etc/ssl:/etc/ssl 
    depends_on:
      - backend-app
      - frontend
      - ml
    networks:
      - app-network

  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=appdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

volumes:
  uploads:
  postgres_data:
  models:  # Добавлен volume для ML моделей

networks:
  app-network:
    driver: bridge